{"version":3,"sources":["containers/Folders/Folders.module.css","containers/Tasks/Task/Task.module.css","common/Header/Header.js","containers/Folders/Folder/Folder.js","hoc/Aux.js","containers/Tasks/Task/Task.js","containers/Tasks/Tasks.js","containers/Folders/Folders.js","App.js","serviceWorker.js","index.js","containers/Tasks/Tasks.module.css","App.module.css","containers/Folders/Folder/Folder.module.css","common/Header/Header.module.css","assets/images/icon.png"],"names":["module","exports","Header","className","styles","HeaderWrapper","src","icon","alt","faBars","Folder","props","activeClass","chosenFolderId","folder","id","Chosen","isEditting","idOfFolderBeingEditted","folderDisplay","join","FolderName","onClick","updateCurrentFolder","name","Icon","Lift","changeBeingEdittedFolderId","faPencilAlt","Shake","deleteFolder","faTrashAlt","folderEdit","type","value","onChange","e","editFolderName","onKeyPress","faCheck","Aux","children","Task","TaskContainer","style","backgroundColor","bgColor","TaskEntry","checked","task","isFinished","currentFolderIndex","taskId","finish","htmlFor","deleteTask","Tasks","state","allTasks","folderId","tasks","priority","showFinishedTasks","toggleFinished","setState","onFinishClick","folderIndex","allTasksToBeUpdated","finishedTaskIndex","findIndex","taskToBeDeletedIndex","splice","addFolder","newFolderId","push","this","currentFolderId","tasksElements","initialTask","finishedTasksElements","showFinishedButton","map","key","reduce","finishedExist","TasksTitle","FinishedTasks","Component","Folders","folders","taskQuantity","newFolderName","isEditing","showFolderInput","newFolderNameUpdate","target","submitIfIsEnter","keyCode","which","foldersToBeUpdated","length","tasksElement","current","index","window","confirm","console","log","React","createRef","folderElements","eachFolder","editFolder","plusSign","AddFolderSign","faPlusCircle","addFolderInput","AddFolderInput","faPlus","FoldersContainer","FolderTitle","FolderControl","TasksContainer","ref","App","Content","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.33d0dcc6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"FoldersContainer\":\"Folders_FoldersContainer__2vgW_\",\"TasksContainer\":\"Folders_TasksContainer__35-hj\",\"FolderTitle\":\"Folders_FolderTitle__2HmUo\",\"FolderControl\":\"Folders_FolderControl__26CW6\",\"AddFolderSign\":\"Folders_AddFolderSign__39MOr\",\"AddFolderInput\":\"Folders_AddFolderInput__1CV8U\",\"Icon\":\"Folders_Icon__2TNqH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TaskContainer\":\"Task_TaskContainer__2olXk\",\"TaskEntry\":\"Task_TaskEntry__3hu79\",\"Icon\":\"Task_Icon__32YGe\",\"Lift\":\"Task_Lift__1Bpim\",\"Shake\":\"Task_Shake__1aEP5\",\"shake\":\"Task_shake__2-kUP\"};","import React from 'react';\nimport styles from './Header.module.css';\nimport icon from '../../assets/images/icon.png'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faBars } from '@fortawesome/free-solid-svg-icons'\n\nexport default function Header() {\n    return (\n        <div className={styles.HeaderWrapper}>\n            <img src={icon} alt=\"site-icon\"/>\n            <p>Ticklist</p>\n            <FontAwesomeIcon icon={faBars} />\n        </div>\n    )\n}\n","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTrashAlt, faPencilAlt, faCheck } from '@fortawesome/free-solid-svg-icons';\nimport styles from './Folder.module.css'\nimport { is } from '@babel/types';\n\nexport default function Folder(props) {\n    var activeClass;\n    if (props.chosenFolderId === props.folder.id) {\n        activeClass = styles.Chosen;\n    }\n    var isEditting = false;\n    if (props.idOfFolderBeingEditted === props.folder.id){\n        isEditting = true;\n    }\n\n    const folderDisplay = (\n        <div className={[styles.Folder, activeClass].join(\" \")}>\n            <div className={styles.FolderName} onClick={() => props.updateCurrentFolder(props.folder.id)}>\n                <p>{props.folder.name}</p>\n            </div>\n            <div className={[styles.Icon, styles.Lift].join(\" \")}>\n                <FontAwesomeIcon\n                    onClick={() => props.changeBeingEdittedFolderId(props.folder.id)}\n                    icon={faPencilAlt} />\n            </div>\n            <FontAwesomeIcon\n                className={[styles.Icon, styles.Shake].join(\" \")}\n                onClick={() => props.deleteFolder(props.folder.id)}\n                icon={faTrashAlt} />\n        </div>);\n    const folderEdit = (\n        <div className={styles.Folder}>\n            <input type=\"text\" value={props.folder.name}\n                onChange={(e) => props.editFolderName(e, props.folder.id)}\n                onKeyPress={(e) => props.changeBeingEdittedFolderId(props.folder.id)}\n                ></input>\n            <FontAwesomeIcon className={styles.Icon}\n                onClick={()=>{props.changeBeingEdittedFolderId(props.folder.id)}}\n                icon={faCheck} />\n        </div>\n    );\n    return isEditting ? folderEdit : folderDisplay;\n}\n","const Aux = (props) => props.children;\n\nexport default Aux;","import React from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTrashAlt, faPencilAlt } from '@fortawesome/free-solid-svg-icons';\nimport styles from './Task.module.css'\n\nexport default function Task(props) {\n    return (\n        <div className={styles.TaskContainer} style={{backgroundColor: props.bgColor}}>\n            <div className={styles.TaskEntry}>\n                <input type=\"checkbox\" checked={props.task.isFinished}\n                    id={props.currentFolderIndex+'_'+props.task.taskId}\n                    onChange={() => props.finish(props.task.taskId, props.currentFolderIndex)}></input>\n                <label htmlFor={props.currentFolderIndex+'_'+props.task.taskId}>{props.task.name}</label>\n            </div>\n            <div className={[styles.Icon, styles.Lift].join(\" \")}>\n                <FontAwesomeIcon\n                // onClick={() => props.deleteFolder(props.folder.id)}\n                icon={faPencilAlt} />\n            </div> \n            <FontAwesomeIcon\n                className={[styles.Icon, styles.Shake].join(\" \")}\n                onClick={() => props.deleteTask(props.task.taskId, props.currentFolderIndex)}\n                icon={faTrashAlt} />\n        </div>\n    )\n}\n","import React, { Component } from 'react';\nimport Task from './Task/Task';\n\nimport styles from './Tasks.module.css';\nexport class Tasks extends Component {\n    state = {\n        allTasks: [\n            {\n                folderId: 0,\n                tasks: [\n                    {\n                        taskId: 0,\n                        name: \"add my todo\",\n                        isFinished: false,\n                        priority: 0\n                    },\n                    {\n                        taskId: 1,\n                        name: \"delete my todo\",\n                        isFinished: false,\n                        priority: 0\n                    },\n                ]\n            },\n            {\n                folderId: 1,\n                tasks: [\n                    {\n                        taskId: 0,\n                        name: \"addddd\",\n                        isFinished: false,\n                        priority: 0\n                    },\n                    {\n                        taskId: 1,\n                        name: \"deleteeeee\",\n                        isFinished: false,\n                        priority: 0\n                    },\n                ]\n            },\n            {\n                folderId: 2,\n                tasks: [\n                    {\n                        taskId: 0,\n                        name: \"hahaha\",\n                        isFinished: false,\n                        priority: 0\n                    },\n                    {\n                        taskId: 1,\n                        name: \"hohoho\",\n                        isFinished: false,\n                        priority: 0\n                    },\n                ]\n            }\n        ],\n        showFinishedTasks: false\n    }\n    // return true/false: whether to show finished list or not\n    toggleFinished = () => {\n        this.setState({ showFinishedTasks: !this.state.showFinishedTasks });\n    }\n\n    onFinishClick = (taskId, folderIndex) => {\n        const allTasksToBeUpdated = [...this.state.allTasks];\n        let finishedTaskIndex = allTasksToBeUpdated[folderIndex].tasks.findIndex(task => task.taskId === taskId);\n        allTasksToBeUpdated[folderIndex].tasks[finishedTaskIndex].isFinished = !allTasksToBeUpdated[folderIndex].tasks[finishedTaskIndex].isFinished;\n        this.setState({ allTasks: allTasksToBeUpdated });\n    }\n\n    deleteTask = (taskId, folderIndex) => {\n        const allTasksToBeUpdated = [...this.state.allTasks];\n        let taskToBeDeletedIndex = allTasksToBeUpdated[folderIndex].tasks.findIndex(task => task.taskId === taskId);\n        allTasksToBeUpdated[folderIndex].tasks.splice(taskToBeDeletedIndex, 1);\n        this.setState({ allTasks: allTasksToBeUpdated });\n    }\n\n    addFolder = (newFolderId) => {\n        const allTasksToBeUpdated = [...this.state.allTasks];\n        allTasksToBeUpdated.push({\n            folderId: newFolderId,\n            tasks: []\n        })\n        this.setState({ allTasks: allTasksToBeUpdated });\n    }\n\n    deleteFolder = (folderId) => {\n        const allTasksToBeUpdated = [...this.state.allTasks];\n        const folderIndex = this.state.allTasks.findIndex(folder => folder.folderId === folderId);\n        allTasksToBeUpdated.splice(folderIndex, 1);\n        this.setState({ allTasks: allTasksToBeUpdated });\n    }\n\n    render() {\n        // find the index of current folder's tasks in the allTasks array\n        const currentFolderIndex = this.state.allTasks.findIndex(folder => folder.folderId === this.props.currentFolderId);\n\n        // initialize JSX elements\n        var tasksElements = null;\n        var initialTask = null;\n        var finishedTasksElements = null;\n        var showFinishedButton = false;\n        // array of tasks in current folder\n        if (currentFolderIndex !== -1) {\n            const tasks = this.state.allTasks[currentFolderIndex].tasks;\n            tasksElements = tasks.map(task => {\n                if (task.isFinished === false) {\n                    return (<Task key={task.taskId} task={task} currentFolderIndex={currentFolderIndex}\n                        finish={this.onFinishClick} deleteTask={this.deleteTask}></Task>)\n                } else return null;\n            })\n            // array of finished tasks in current folder\n            finishedTasksElements = tasks.map(task => {\n                if (task.isFinished === true) {\n                    return (<Task key={task.taskId} task={task} currentFolderIndex={currentFolderIndex}\n                        finish={this.onFinishClick} deleteTask={this.deleteTask} bgColor=\"white\"></Task>)\n                } else return null;\n            })\n            // value to toggle the finished list button\n            showFinishedButton = tasks.reduce((finishedExist, task) => {\n                return finishedExist || task.isFinished;\n            }, false);\n        } else {\n            initialTask = <div>Choose a folder to start</div>\n        }\n\n\n        return (\n            <div>\n                <h1 className={styles.TasksTitle}>Tasks</h1>\n                {currentFolderIndex !== -1 ? tasksElements : initialTask}\n                <div className={styles.FinishedTasks}>\n                    {showFinishedButton ? <h3 onClick={this.toggleFinished}>Finished list</h3> : null}\n                    {currentFolderIndex !== -1 && this.state.showFinishedTasks ? finishedTasksElements : null}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Tasks;\n","import React, { Component } from 'react';\nimport Folder from './Folder/Folder';\nimport Aux from '../../hoc/Aux'\nimport Tasks from '../Tasks/Tasks'\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faPlusCircle, faPlus } from '@fortawesome/free-solid-svg-icons'\n\nimport styles from './Folders.module.css';\n\nexport class Folders extends Component {\n\n    constructor(props) {\n        super(props);\n        this.tasksElement = React.createRef();\n    }\n    state = {\n        folders: [\n            { id: 0, name: \"school\", taskQuantity: 0 },\n            { id: 1, name: \"work\", taskQuantity: 0 },\n            { id: 2, name: \"grocery\", taskQuantity: 0 },\n        ],\n        newFolderName: \"\",\n        isEditing: false,\n        currentFolderId: -1,\n        idOfFolderBeingEditted: -1,\n    }\n\n    showFolderInput = () => {\n        this.setState({ isEditing: true });\n    }\n\n    newFolderNameUpdate = (e) => {\n        this.setState({ newFolderName: e.target.value });\n    }\n\n    submitIfIsEnter = (e) => {\n        let code = (e.keyCode ? e.keyCode : e.which);\n        if (code === 13) {\n            this.addFolder();\n        }\n    }\n\n    addFolder = () => {\n        if (this.state.newFolderName === \"\") {\n            this.setState({ isEditing: false });\n            return;\n        }\n        const foldersToBeUpdated = [...this.state.folders];\n        let newFolderId;\n        if (foldersToBeUpdated.length === 0) {\n            newFolderId = 0;\n        } else {\n            newFolderId = foldersToBeUpdated[foldersToBeUpdated.length - 1].id + 1;\n        }\n        foldersToBeUpdated.push({\n            id: newFolderId,\n            name: this.state.newFolderName,\n            taskQuantity: 0\n        });\n        this.tasksElement.current.addFolder(newFolderId);\n        this.setState({ folders: foldersToBeUpdated, newFolderName: \"\", isEditing: false });\n    }\n\n    changeBeingEdittedFolderId = (folderId) => {\n        if (folderId === this.state.idOfFolderBeingEditted) {\n            this.setState({ idOfFolderBeingEditted: -1 })\n        } else {\n            this.setState({ idOfFolderBeingEditted: folderId })\n        }\n    }\n\n    deleteFolder = (id) => {\n        const foldersToBeUpdated = [...this.state.folders];\n        const index = foldersToBeUpdated.findIndex(folder => folder.id === id);\n        if (window.confirm(\"Do you want to delete the folder '\" + foldersToBeUpdated[index].name + \"'?\")) {\n            foldersToBeUpdated.splice(index, 1);\n            this.tasksElement.current.deleteFolder(id);\n            this.setState({ folders: foldersToBeUpdated });\n        }\n    }\n\n    updateCurrentFolder = (id) => {\n        this.setState({ currentFolderId: id });\n    }\n\n    editFolderName = (e, id) => {\n        const foldersToBeUpdated = [...this.state.folders];\n        const index = foldersToBeUpdated.findIndex(folder => folder.id === id);\n        var newFolderName = e.target.value;\n        foldersToBeUpdated[index].name = newFolderName;\n        this.setState({ folders: foldersToBeUpdated });\n        console.log(this.state.folders)\n    }\n\n\n    render() {\n        // JSX elements\n        const folderElements = this.state.folders.map(eachFolder => {\n            return (\n                <Folder\n                    changeBeingEdittedFolderId={this.changeBeingEdittedFolderId}\n                    idOfFolderBeingEditted={this.state.idOfFolderBeingEditted}\n                    chosenFolderId={this.state.currentFolderId}\n                    updateCurrentFolder={this.updateCurrentFolder}\n                    key={eachFolder.id}\n                    folder={eachFolder}\n                    editFolder={this.editFolder}\n                    deleteFolder={this.deleteFolder}\n                    editFolderName={this.editFolderName}></Folder>\n            )\n        });\n        const plusSign = <FontAwesomeIcon\n            onClick={this.showFolderInput}\n            className={styles.AddFolderSign}\n            icon={faPlusCircle} />;\n\n        const addFolderInput =\n            <div className={styles.AddFolderInput}>\n                <input type=\"text\" id=\"newFolder\"\n                    onChange={(e) => this.newFolderNameUpdate(e)}\n                    onKeyPress={(e) => this.submitIfIsEnter(e)}></input>\n                <FontAwesomeIcon className={styles.Icon}\n                    onClick={this.addFolder}\n                    icon={faPlus} />\n            </div>\n\n        return (\n            <Aux>\n                <div className={styles.FoldersContainer}>\n                    <h1 className={styles.FolderTitle}>Folders</h1>\n                    {folderElements}\n                    <div className={styles.FolderControl}>\n                        {this.state.isEditing ? addFolderInput : plusSign}\n                    </div>\n                </div>\n                <div className={styles.TasksContainer}>\n                    <Tasks ref={this.tasksElement} currentFolderId={this.state.currentFolderId}></Tasks>\n                </div>\n            </Aux>\n        );\n    }\n}\n\nexport default Folders;\n","import React from 'react';\nimport Header from './common/Header/Header';\nimport Folders from './containers/Folders/Folders'\nimport styles from './App.module.css';\n\nfunction App() {\n  return (\n    <div className={styles.App}>\n      <style>\n        @import url('https://fonts.googleapis.com/css?family=Julius+Sans+One|Quicksand:300,400,500,600&display=swap');\n      </style>\n      <Header></Header>\n      <div className={styles.Content}>\n        <Folders></Folders>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TasksTitle\":\"Tasks_TasksTitle__IxaET\",\"FinishedTasks\":\"Tasks_FinishedTasks__2jpe7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__16ZpL\",\"Content\":\"App_Content__ZaMNr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Folder\":\"Folder_Folder__2dPeI\",\"FolderName\":\"Folder_FolderName__G9gUd\",\"Chosen\":\"Folder_Chosen__1_Xa0\",\"Icon\":\"Folder_Icon__3GQEb\",\"Lift\":\"Folder_Lift__10LHr\",\"Shake\":\"Folder_Shake__1FeEi\",\"shake\":\"Folder_shake__1AGYJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"HeaderWrapper\":\"Header_HeaderWrapper__25J6e\"};","module.exports = __webpack_public_path__ + \"static/media/icon.6dac99c6.png\";"],"sourceRoot":""}