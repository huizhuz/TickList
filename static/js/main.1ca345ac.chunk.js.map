{"version":3,"sources":["containers/Folders/Folder/Folder.module.css","App.module.css","common/Header/Header.module.css","assets/images/icon.png","containers/Folders/Folders.module.css","common/Header/Header.js","containers/Folders/Folder/Folder.js","hoc/Aux.js","containers/Tasks/Tasks.js","containers/Folders/Folders.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","styles","HeaderWrapper","src","icon","alt","faBars","Folder","props","FolderName","onClick","updateCurrentFolder","folder","id","name","Icon","deleteFolder","faTrashAlt","Aux","children","Tasks","state","allTasks","folderId","tasks","isFinished","priority","currentFolderId","currentTasks","this","Component","Folders","folders","taskQuantity","newFolderName","isEditing","showFolderInput","setState","newFolderNameUpdate","e","target","value","submitIfIsEnter","keyCode","which","addFolder","newFolderId","foldersToBeUpdated","length","push","index","findIndex","splice","folderElements","map","eachFolder","key","plusSign","AddFolderSign","faPlusCircle","addFolderInput","AddFolderInput","type","onChange","onKeyPress","faPlus","FoldersContainer","FolderTitle","FolderControl","TasksContainer","App","Content","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1ca345ac.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Folder\":\"Folder_Folder__2dPeI\",\"FolderName\":\"Folder_FolderName__G9gUd\",\"Icon\":\"Folder_Icon__3GQEb\",\"shake\":\"Folder_shake__1AGYJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__16ZpL\",\"Content\":\"App_Content__ZaMNr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"HeaderWrapper\":\"Header_HeaderWrapper__25J6e\"};","module.exports = __webpack_public_path__ + \"static/media/icon.6dac99c6.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"FoldersContainer\":\"Folders_FoldersContainer__2vgW_\",\"TasksContainer\":\"Folders_TasksContainer__35-hj\",\"FolderTitle\":\"Folders_FolderTitle__2HmUo\",\"FolderControl\":\"Folders_FolderControl__26CW6\",\"AddFolderSign\":\"Folders_AddFolderSign__39MOr\",\"AddFolderInput\":\"Folders_AddFolderInput__1CV8U\",\"Icon\":\"Folders_Icon__2TNqH\"};","import React from 'react';\nimport styles from './Header.module.css';\nimport icon from '../../assets/images/icon.png'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faBars } from '@fortawesome/free-solid-svg-icons'\n\nexport default function Header() {\n    return (\n        <div className={styles.HeaderWrapper}>\n            <img src={icon} alt=\"site-icon\"/>\n            <p>Ticklist</p>\n            <FontAwesomeIcon icon={faBars} />\n        </div>\n    )\n}\n","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTrashAlt } from '@fortawesome/free-solid-svg-icons';\nimport styles from './Folder.module.css'\n\nexport default function Folder(props) {\n    return (\n        <div className={styles.Folder}>\n            <div className={styles.FolderName} onClick={() => props.updateCurrentFolder(props.folder.id)}>\n                <p>{props.folder.name}</p>\n            </div>\n            <FontAwesomeIcon\n                className={styles.Icon}\n                onClick={() => props.deleteFolder(props.folder.id)}\n                icon={faTrashAlt} />\n        </div>\n    )\n}\n","const Aux = (props) => props.children;\n\nexport default Aux;","import React, { Component } from 'react';\n\nexport class Tasks extends Component {\n    state = {\n        allTasks: [\n            {\n                folderId: \"\",\n                tasks: [\n                    {\n                        name: \"add my todo\",\n                        isFinished: false,\n                        priority: 0\n                    },\n                    {\n                        name: \"delete my todo\",\n                        isFinished: false,\n                        priority: 0\n                    },\n                ]\n            }\n        ],\n        currentFolderId: this.props.currentFolderId,\n        currentTasks: [],\n    }\n\n    render() {\n        return (\n            <div>\n                {this.props.currentFolderId}\n            </div>\n        );\n    }\n}\n\nexport default Tasks;\n","import React, { Component } from 'react';\nimport Folder from './Folder/Folder';\nimport Aux from '../../hoc/Aux'\nimport Tasks from '../Tasks/Tasks'\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faPlusCircle, faPlus } from '@fortawesome/free-solid-svg-icons'\n\nimport styles from './Folders.module.css';\n\nexport class Folders extends Component {\n    state = {\n        folders: [\n            { id: 0, name: \"school\", taskQuantity: 0 },\n            { id: 1, name: \"work\", taskQuantity: 0 },\n            { id: 2, name: \"grocery\", taskQuantity: 0 },\n        ],\n        newFolderName: \"\",\n        isEditing: false,\n        currentFolderId: -1\n    }\n\n    showFolderInput = () => {\n        this.setState({ isEditing: true });\n    }\n\n    newFolderNameUpdate = (e) => {\n        this.setState({ newFolderName: e.target.value });\n    }\n\n    submitIfIsEnter = (e) => {\n        let code = (e.keyCode ? e.keyCode : e.which);\n        if (code === 13) {\n            this.addFolder();\n        }\n    }\n\n    addFolder = () => {\n        if (this.state.newFolderName === \"\") {\n            return;\n        }\n        const foldersToBeUpdated = [...this.state.folders];\n        let newFolderId;\n        if (foldersToBeUpdated.length === 0) {\n            newFolderId = 0;\n        } else {\n            newFolderId = foldersToBeUpdated[foldersToBeUpdated.length - 1].id + 1;\n        }\n        foldersToBeUpdated.push({\n            id: newFolderId,\n            name: this.state.newFolderName,\n            taskQuantity: 0\n        });\n        this.setState({ folders: foldersToBeUpdated, newFolderName: \"\", isEditing: false });\n    }\n\n    deleteFolder = (id) => {\n        const foldersToBeUpdated = [...this.state.folders];\n        const index = foldersToBeUpdated.findIndex(folder => folder.id === id);\n        foldersToBeUpdated.splice(index, 1);\n        this.setState({ folders: foldersToBeUpdated });\n    }\n\n    updateCurrentFolder = (id) => {\n        this.setState({ currentFolderId: id });\n    }\n\n    render() {\n        // JSX elements\n        const folderElements = this.state.folders.map(eachFolder => {\n            return (\n                <Folder\n                    updateCurrentFolder={this.updateCurrentFolder}\n                    key={eachFolder.id}\n                    folder={eachFolder}\n                    deleteFolder={this.deleteFolder}></Folder>\n            )\n        });\n        const plusSign = <FontAwesomeIcon\n            onClick={this.showFolderInput}\n            className={styles.AddFolderSign}\n            icon={faPlusCircle} />;\n\n        const addFolderInput =\n            <div className={styles.AddFolderInput}>\n                <input type=\"text\" id=\"newFolder\"\n                    onChange={(e) => this.newFolderNameUpdate(e)}\n                    onKeyPress={(e) => this.submitIfIsEnter(e)}></input>\n                <FontAwesomeIcon className={styles.Icon}\n                    onClick={this.addFolder}\n                    icon={faPlus} />\n            </div>\n\n        return (\n            <Aux>\n                <div className={styles.FoldersContainer}>\n                    <h1 className={styles.FolderTitle}>Folders</h1>\n                    {folderElements}\n                    <div className={styles.FolderControl}>\n                        {this.state.isEditing ? addFolderInput : plusSign}\n                    </div>\n                </div>\n                <div className={styles.TasksContainer}>\n                    <Tasks currentFolderId={this.state.currentFolderId}></Tasks>\n                </div>\n            </Aux>\n        );\n    }\n}\n\nexport default Folders;\n","import React from 'react';\nimport Header from './common/Header/Header';\nimport Folders from './containers/Folders/Folders'\nimport styles from './App.module.css';\n\nfunction App() {\n  return (\n    <div className={styles.App}>\n      <style>\n        @import url('https://fonts.googleapis.com/css?family=Julius+Sans+One|Quicksand:300,400,500,600&display=swap');\n      </style>\n      <Header></Header>\n      <div className={styles.Content}>\n        <Folders></Folders>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}