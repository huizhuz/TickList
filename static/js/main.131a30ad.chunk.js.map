{"version":3,"sources":["common/Header/Header.module.css","assets/images/icon.png","containers/Folders/Folders.module.css","common/Header/Header.js","containers/Folders/Folder/Folder.js","containers/Folders/Folders.js","App.js","serviceWorker.js","index.js","App.module.css"],"names":["module","exports","Header","className","styles","HeaderWrapper","src","icon","faBars","Folder","props","folderProps","name","Folders","state","folders","id","taskQuantity","newFolderName","isEditing","showFolderInput","setState","newFolderNameUpdate","e","target","value","addFolder","foldersToBeUpdated","newFolderId","length","push","folderElements","this","map","eachFolder","key","plusSign","onClick","AddFolderSign","faPlusCircle","addFolderInput","AddFolderInput","type","onChange","faPlus","FoldersContainer","FolderTitle","FolderControl","Component","App","Content","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wFACAA,EAAOC,QAAU,CAAC,cAAgB,gC,mBCDlCD,EAAOC,QAAU,IAA0B,kC,sDCC3CD,EAAOC,QAAU,CAAC,iBAAmB,kCAAkC,YAAc,6BAA6B,cAAgB,+BAA+B,cAAgB,+BAA+B,eAAiB,kC,wJCKlN,SAASC,IACpB,OACI,yBAAKC,UAAWC,IAAOC,eACnB,yBAAKC,IAAKC,MACV,uCACA,kBAAC,IAAD,CAAiBA,KAAMC,O,oDCTpB,SAASC,EAAOC,GAC3B,OACI,6BACKA,EAAMC,YAAYC,M,oBCmEhBC,EAhEf,2MACIC,MAAQ,CACJC,QAAS,CACL,CAAEC,GAAI,EAAGJ,KAAM,SAAUK,aAAc,GACvC,CAAED,GAAI,EAAGJ,KAAM,OAAQK,aAAc,GACrC,CAAED,GAAI,EAAGJ,KAAM,UAAWK,aAAc,IAE5CC,cAAe,GACfC,WAAW,GARnB,EAWIC,gBAAkB,WACd,EAAKC,SAAS,CAAEF,WAAW,KAZnC,EAeIG,oBAAsB,SAACC,GACnB,EAAKF,SAAS,CAACH,cAAeK,EAAEC,OAAOC,SAhB/C,EAmBIC,UAAY,WACR,IAAMC,EAAkB,YAAO,EAAKb,MAAMC,SACpCa,EAAcD,EAAmBA,EAAmBE,OAAO,GAAGb,GAAK,EACzEW,EAAmBG,KAAK,CACpBd,GAAIY,EACJhB,KAAM,EAAKE,MAAMI,cACjBD,aAAc,IAElB,EAAKI,SAAS,CAAEN,QAASY,EAAoBT,cAAe,GAAIC,WAAW,KA3BnF,wEA8Bc,IAAD,OAECY,EAAiBC,KAAKlB,MAAMC,QAAQkB,KAAI,SAAAC,GAC1C,OACI,kBAACzB,EAAD,CACI0B,IAAKD,EAAWlB,GAChBL,YAAauB,OAGnBE,EAAW,kBAAC,IAAD,CACbC,QAASL,KAAKZ,gBACdjB,UAAWC,IAAOkC,cAClB/B,KAAMgC,MAEJC,EACF,yBAAKrC,UAAWC,IAAOqC,gBACnB,2BAAOC,KAAK,OAAO1B,GAAG,YAAY2B,SAAU,SAACpB,GAAD,OAAO,EAAKD,oBAAoBC,MAC5E,kBAAC,IAAD,CACIc,QAASL,KAAKN,UACdnB,KAAMqC,OAGlB,OACI,yBAAKzC,UAAWC,IAAOyC,kBACnB,wBAAI1C,UAAWC,IAAO0C,aAAtB,WACCf,EACD,yBAAK5B,UAAWC,IAAO2C,eAClBf,KAAKlB,MAAMK,UAAYqB,EAAiBJ,QAzD7D,GAA6BY,a,gBCWdC,MAdf,WACE,OACE,yBAAK9C,UAAWC,IAAO6C,KACrB,iJAGA,kBAAC/C,EAAD,MACA,yBAAKC,UAAWC,IAAO8C,SACrB,kBAAC,EAAD,SCDYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,kBElInBjE,EAAOC,QAAU,CAAC,IAAM,iBAAiB,QAAU,wB","file":"static/js/main.131a30ad.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"HeaderWrapper\":\"Header_HeaderWrapper__25J6e\"};","module.exports = __webpack_public_path__ + \"static/media/icon.6dac99c6.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"FoldersContainer\":\"Folders_FoldersContainer__2vgW_\",\"FolderTitle\":\"Folders_FolderTitle__2HmUo\",\"FolderControl\":\"Folders_FolderControl__26CW6\",\"AddFolderSign\":\"Folders_AddFolderSign__39MOr\",\"AddFolderInput\":\"Folders_AddFolderInput__1CV8U\"};","import React from 'react';\nimport styles from './Header.module.css';\nimport icon from '../../assets/images/icon.png'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faBars } from '@fortawesome/free-solid-svg-icons'\n\nexport default function Header() {\n    return (\n        <div className={styles.HeaderWrapper}>\n            <img src={icon} />\n            <p>Ticklist</p>\n            <FontAwesomeIcon icon={faBars} />\n        </div>\n    )\n}\n","import React from 'react'\n\nexport default function Folder(props) {\n    return (\n        <div>\n            {props.folderProps.name}\n        </div>\n    )\n}\n","import React, { Component } from 'react';\nimport Folder from './Folder/Folder';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faPlusCircle, faPlus } from '@fortawesome/free-solid-svg-icons'\n\nimport styles from './Folders.module.css';\n\nexport class Folders extends Component {\n    state = {\n        folders: [\n            { id: 0, name: \"school\", taskQuantity: 0 },\n            { id: 1, name: \"work\", taskQuantity: 0 },\n            { id: 2, name: \"grocery\", taskQuantity: 0 },\n        ],\n        newFolderName: \"\",\n        isEditing: false\n    }\n\n    showFolderInput = () => {\n        this.setState({ isEditing: true });\n    }\n\n    newFolderNameUpdate = (e) => {\n        this.setState({newFolderName: e.target.value});\n    }\n\n    addFolder = () => {\n        const foldersToBeUpdated = [...this.state.folders];\n        const newFolderId = foldersToBeUpdated[foldersToBeUpdated.length-1].id + 1;\n        foldersToBeUpdated.push({\n            id: newFolderId,\n            name: this.state.newFolderName,\n            taskQuantity: 0\n        });\n        this.setState({ folders: foldersToBeUpdated, newFolderName: \"\", isEditing: false });\n    }\n\n    render() {\n        // JSX elements\n        const folderElements = this.state.folders.map(eachFolder => {\n            return (\n                <Folder\n                    key={eachFolder.id}\n                    folderProps={eachFolder}></Folder>\n            )\n        });\n        const plusSign = <FontAwesomeIcon\n            onClick={this.showFolderInput}\n            className={styles.AddFolderSign}\n            icon={faPlusCircle} />;\n        \n        const addFolderInput = \n            <div className={styles.AddFolderInput}>\n                <input type=\"text\" id=\"newFolder\" onChange={(e) => this.newFolderNameUpdate(e)}></input>\n                <FontAwesomeIcon\n                    onClick={this.addFolder}\n                    icon={faPlus} />\n            </div>\n\n        return (\n            <div className={styles.FoldersContainer}>\n                <h1 className={styles.FolderTitle}>Folders</h1>\n                {folderElements}\n                <div className={styles.FolderControl}>\n                    {this.state.isEditing ? addFolderInput : plusSign}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Folders;\n","import React from 'react';\nimport Header from './common/Header/Header';\nimport Folders from './containers/Folders/Folders'\nimport styles from './App.module.css';\n\nfunction App() {\n  return (\n    <div className={styles.App}>\n      <style>\n        @import url('https://fonts.googleapis.com/css?family=Julius+Sans+One|Quicksand:300,400,500,600&display=swap');\n      </style>\n      <Header></Header>\n      <div className={styles.Content}>\n        <Folders></Folders>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__16ZpL\",\"Content\":\"App_Content__ZaMNr\"};"],"sourceRoot":""}