{"version":3,"sources":["containers/Tasks/Task/Task.module.css","containers/Folders/Folder/Folder.module.css","containers/Folders/Folders.module.css","containers/Tasks/Tasks.module.css","App.module.css","common/Header/Header.module.css","assets/images/icon.png","common/Header/Header.js","containers/Folders/Folder/Folder.js","hoc/Aux.js","containers/Tasks/Task/Task.js","containers/Tasks/Tasks.js","containers/Folders/Folders.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","styles","HeaderWrapper","src","icon","alt","faBars","Folder","props","activeClass","chosenFolderId","folder","id","Chosen","isEditing","idOfFolderBeingEditted","folderDisplay","join","FolderName","onClick","updateCurrentFolder","name","Icon","Lift","changeBeingEdittedFolderId","faPencilAlt","Shake","deleteFolder","faTrashAlt","folderEdit","type","value","onChange","e","editFolderName","onKeyPress","confirmChange","faCheck","Aux","children","Task","useState","setEditing","fadeout","setFadeout","fadeoutStyle","FadeOut","taskDisplay","TaskContainer","style","backgroundColor","bgColor","TaskEntry","checked","task","isFinished","currentFolderIndex","taskId","finish","htmlFor","priority","setPriority","faFlagChosen","faFlag","deleteTask","taskEdit","disabled","EditField","editTaskName","keyCode","which","Tasks","state","allTasks","folderId","tasks","newTaskName","showFinishedTasks","newTaskNameUpdate","setState","target","onAddNewTask","folderIndex","newTaskId","allTasksToBeUpdated","currentTasks","length","push","submitIfIsEnter","toggleFinished","onFinishClick","setTimeout","finishedTaskIndex","findIndex","taskToBeDeletedIndex","splice","addFolder","newFolderId","taskIndex","this","currentFolderId","tasksElements","initialTask","finishedTasksElements","showFinishedButton","addNewTask","AddTask","key","faPlus","map","reduce","finishedExist","display","justifyContent","alignItems","TasksTitle","FinishedTasks","Component","Folders","folders","taskQuantity","newFolderName","currentFolderName","folderIsHidden","showFolderInput","newFolderNameUpdate","foldersToBeUpdated","tasksElement","current","index","window","confirm","React","createRef","folderElements","eachFolder","editFolder","plusSign","AddFolderSign","faPlusCircle","addFolderInput","AddFolderInput","FoldersContainer","FolderTitle","HideFolder","ShowFolder","FolderControl","TasksContainer","ref","App","Content","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ecc1dd73.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"TaskContainer\":\"Task_TaskContainer__2olXk\",\"fadein\":\"Task_fadein__1MzRb\",\"TaskEntry\":\"Task_TaskEntry__3hu79\",\"FadeOut\":\"Task_FadeOut__14y0L\",\"fadeout\":\"Task_fadeout__371TV\",\"EditField\":\"Task_EditField__J45LG\",\"Icon\":\"Task_Icon__32YGe\",\"Lift\":\"Task_Lift__1Bpim\",\"Shake\":\"Task_Shake__1aEP5\",\"shake\":\"Task_shake__2-kUP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Folder\":\"Folder_Folder__2dPeI\",\"FolderName\":\"Folder_FolderName__G9gUd\",\"Chosen\":\"Folder_Chosen__1_Xa0\",\"Icon\":\"Folder_Icon__3GQEb\",\"Lift\":\"Folder_Lift__10LHr\",\"Shake\":\"Folder_Shake__1FeEi\",\"shake\":\"Folder_shake__1AGYJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"FoldersContainer\":\"Folders_FoldersContainer__2vgW_\",\"TasksContainer\":\"Folders_TasksContainer__35-hj\",\"FolderTitle\":\"Folders_FolderTitle__2HmUo\",\"FolderControl\":\"Folders_FolderControl__26CW6\",\"AddFolderSign\":\"Folders_AddFolderSign__39MOr\",\"AddFolderInput\":\"Folders_AddFolderInput__1CV8U\",\"Icon\":\"Folders_Icon__2TNqH\",\"HideFolder\":\"Folders_HideFolder__2KN8J\",\"ShowFolder\":\"Folders_ShowFolder__2jiJq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TasksTitle\":\"Tasks_TasksTitle__IxaET\",\"FinishedTasks\":\"Tasks_FinishedTasks__2jpe7\",\"AddTask\":\"Tasks_AddTask__2qBuV\",\"Icon\":\"Tasks_Icon__1qdEW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__16ZpL\",\"Content\":\"App_Content__ZaMNr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"HeaderWrapper\":\"Header_HeaderWrapper__25J6e\"};","module.exports = __webpack_public_path__ + \"static/media/icon.6dac99c6.png\";","import React from 'react';\nimport styles from './Header.module.css';\nimport icon from '../../assets/images/icon.png'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faBars } from '@fortawesome/free-solid-svg-icons'\n\nexport default function Header() {\n    return (\n        <div className={styles.HeaderWrapper}>\n            <img src={icon} alt=\"site-icon\"/>\n            <p>Ticklist</p>\n            <FontAwesomeIcon icon={faBars} />\n        </div>\n    )\n}\n","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTrashAlt, faPencilAlt, faCheck } from '@fortawesome/free-solid-svg-icons';\nimport styles from './Folder.module.css'\n\nexport default function Folder(props) {\n    var activeClass;\n    if (props.chosenFolderId === props.folder.id) {\n        activeClass = styles.Chosen;\n    }\n    var isEditing = false;\n    if (props.idOfFolderBeingEditted === props.folder.id){\n        isEditing = true;\n    }\n\n    const folderDisplay = (\n        <div className={[styles.Folder, activeClass].join(\" \")}>\n            <div className={styles.FolderName} onClick={() => props.updateCurrentFolder(props.folder.id)}>\n                <p>{props.folder.name}</p>\n            </div>\n            <div className={[styles.Icon, styles.Lift].join(\" \")}>\n                <FontAwesomeIcon\n                    onClick={() => props.changeBeingEdittedFolderId(props.folder.id)}\n                    icon={faPencilAlt} />\n            </div>\n            <FontAwesomeIcon\n                className={[styles.Icon, styles.Shake].join(\" \")}\n                onClick={() => props.deleteFolder(props.folder.id)}\n                icon={faTrashAlt} />\n        </div>);\n    const folderEdit = (\n        <div className={styles.Folder}>\n            <input type=\"text\" value={props.folder.name}\n                onChange={(e) => props.editFolderName(e, props.folder.id)}\n                onKeyPress={(e) => props.confirmChange(e, props.folder.id)}\n                ></input>\n            <FontAwesomeIcon className={styles.Icon}\n                onClick={()=>{props.changeBeingEdittedFolderId(props.folder.id)}}\n                icon={faCheck} />\n        </div>\n    );\n    return isEditing ? folderEdit : folderDisplay;\n}\n","const Aux = (props) => props.children;\n\nexport default Aux;","import React, { useState } from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTrashAlt, faPencilAlt, faCheck, faFlag as faFlagChosen } from '@fortawesome/free-solid-svg-icons';\nimport { faFlag } from '@fortawesome/free-regular-svg-icons';\n\nimport styles from './Task.module.css'\n\nexport default function Task(props) {\n\n    const [isEditing, setEditing] = useState(false);\n    const [fadeout, setFadeout] = useState(false);\n\n    var fadeoutStyle = fadeout ? styles.FadeOut : null;\n\n    const taskDisplay = (\n        <div className={[styles.TaskContainer, fadeoutStyle].join(\" \")} style={{ backgroundColor: props.bgColor }}>\n            <div className={styles.TaskEntry}>\n                <input type=\"checkbox\" checked={props.task.isFinished}\n                    id={props.currentFolderIndex + '_' + props.task.taskId}\n                    onChange={() => {\n                        setFadeout(!fadeout);\n                        props.finish(props.task.taskId, props.currentFolderIndex)\n                    }}></input>\n                <label htmlFor={props.currentFolderIndex + '_' + props.task.taskId}>{props.task.name}</label>\n            </div>\n            {props.task.isFinished ? null :\n                props.task.priority === 1 ?\n                    <FontAwesomeIcon\n                        className={styles.Icon}\n                        onClick={() => props.setPriority(props.task.taskId, props.currentFolderIndex)}\n                        icon={faFlagChosen} /> :\n                    <FontAwesomeIcon\n                        className={styles.Icon}\n                        onClick={() => props.setPriority(props.task.taskId, props.currentFolderIndex)}\n                        icon={faFlag} />\n            }\n            {props.task.isFinished ? null :\n                <div className={[styles.Icon, styles.Lift].join(\" \")}>\n                    <FontAwesomeIcon\n                        onClick={() => { setEditing(!isEditing) }}\n                        icon={faPencilAlt} />\n                </div>\n            }\n            <FontAwesomeIcon\n                className={[styles.Icon, styles.Shake].join(\" \")}\n                onClick={() => props.deleteTask(props.task.taskId, props.currentFolderIndex)}\n                icon={faTrashAlt} />\n        </div>\n    )\n    const taskEdit = (\n        <div className={styles.TaskContainer}>\n            <div className={styles.TaskEntry}>\n                <input type=\"checkbox\" checked={props.task.isFinished} disabled={true}></input>\n                <input className={styles.EditField} type=\"text\" value={props.task.name}\n                    onChange={(e) => props.editTaskName(e, props.currentFolderIndex, props.task.taskId)}\n                    onKeyPress={(e) => {\n                        let code = (e.keyCode ? e.keyCode : e.which);\n                        if (code === 13) {\n                            setEditing(!isEditing)\n                        }\n                    }}\n                ></input>\n            </div>\n            <FontAwesomeIcon className={styles.Icon}\n                onClick={() => { setEditing(!isEditing) }}\n                icon={faCheck} />\n        </div>\n    )\n\n    return isEditing ? taskEdit : taskDisplay\n}\n","import React, { Component } from 'react';\nimport Task from './Task/Task';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\n\nimport styles from './Tasks.module.css';\nexport class Tasks extends Component {\n    state = {\n        allTasks: [\n            {\n                folderId: 0,\n                tasks: [\n                    {\n                        taskId: 0,\n                        name: \"Meet Prof Shau\",\n                        isFinished: false,\n                        priority: 0\n                    },\n                    {\n                        taskId: 1,\n                        name: \"Homework Due\",\n                        isFinished: false,\n                        priority: 0\n                    },\n                ]\n            },\n            {\n                folderId: 1,\n                tasks: [\n                    {\n                        taskId: 0,\n                        name: \"Create PR\",\n                        isFinished: false,\n                        priority: 0\n                    },\n                    {\n                        taskId: 1,\n                        name: \"Presentation prep\",\n                        isFinished: false,\n                        priority: 0\n                    },\n                ]\n            },\n            {\n                folderId: 2,\n                tasks: [\n                    {\n                        taskId: 0,\n                        name: \"Bananas\",\n                        isFinished: false,\n                        priority: 0\n                    },\n                    {\n                        taskId: 1,\n                        name: \"Fish\",\n                        isFinished: false,\n                        priority: 0\n                    },\n                ]\n            }\n        ],\n        newTaskName: \"\",\n        showFinishedTasks: false\n    }\n\n    newTaskNameUpdate = (e) => {\n        this.setState({ newTaskName: e.target.value })\n    }\n\n    onAddNewTask = (folderIndex) => {\n        if (this.state.newTaskName === \"\") {\n            return;\n        };\n        const allTasksToBeUpdated = [...this.state.allTasks];\n        let newTaskId;\n        const currentTasks = allTasksToBeUpdated[folderIndex].tasks;\n        if (currentTasks.length === 0) {\n            newTaskId = 0;\n        } else {\n            newTaskId = currentTasks[currentTasks.length - 1].taskId + 1;\n        }\n        allTasksToBeUpdated[folderIndex].tasks.push({\n            taskId: newTaskId,\n            name: this.state.newTaskName,\n            isFinished: false,\n            priority: 0\n        });\n        this.setState({ allTasks: allTasksToBeUpdated, newTaskName: \"\" });\n    }\n\n    submitIfIsEnter = (e, folderIndex) => {\n        let code = (e.keyCode ? e.keyCode : e.which);\n        if (code === 13) {\n            this.onAddNewTask(folderIndex);\n        }\n    }\n    // return true/false: whether to show finished list or not\n    toggleFinished = () => {\n        this.setState({ showFinishedTasks: !this.state.showFinishedTasks });\n    }\n\n    onFinishClick = (taskId, folderIndex) => {\n        setTimeout(() => {\n            const allTasksToBeUpdated = [...this.state.allTasks];\n            let finishedTaskIndex = allTasksToBeUpdated[folderIndex].tasks.findIndex(task => task.taskId === taskId);\n            allTasksToBeUpdated[folderIndex].tasks[finishedTaskIndex].isFinished = !allTasksToBeUpdated[folderIndex].tasks[finishedTaskIndex].isFinished;\n            this.setState({ allTasks: allTasksToBeUpdated });\n        }, 400);\n    }\n\n    deleteTask = (taskId, folderIndex) => {\n        const allTasksToBeUpdated = [...this.state.allTasks];\n        let taskToBeDeletedIndex = allTasksToBeUpdated[folderIndex].tasks.findIndex(task => task.taskId === taskId);\n        allTasksToBeUpdated[folderIndex].tasks.splice(taskToBeDeletedIndex, 1);\n        this.setState({ allTasks: allTasksToBeUpdated });\n    }\n\n    addFolder = (newFolderId) => {\n        const allTasksToBeUpdated = [...this.state.allTasks];\n        allTasksToBeUpdated.push({\n            folderId: newFolderId,\n            tasks: []\n        })\n        this.setState({ allTasks: allTasksToBeUpdated });\n    }\n\n    deleteFolder = (folderId) => {\n        const allTasksToBeUpdated = [...this.state.allTasks];\n        const folderIndex = this.state.allTasks.findIndex(folder => folder.folderId === folderId);\n        allTasksToBeUpdated.splice(folderIndex, 1);\n        this.setState({ allTasks: allTasksToBeUpdated });\n    }\n\n    editTaskName = (e, folderIndex, taskId) => {\n        const allTasksToBeUpdated = [...this.state.allTasks];\n        const taskIndex = allTasksToBeUpdated[folderIndex].tasks.findIndex(task => task.taskId === taskId);\n        allTasksToBeUpdated[folderIndex].tasks[taskIndex].name = e.target.value;\n        this.setState({ allTasks: allTasksToBeUpdated });\n    }\n\n    setPriority = (taskId, folderIndex) => {\n        const allTasksToBeUpdated = [...this.state.allTasks];\n        const taskIndex = allTasksToBeUpdated[folderIndex].tasks.findIndex(task => task.taskId === taskId);\n        allTasksToBeUpdated[folderIndex].tasks[taskIndex].priority = 1 - allTasksToBeUpdated[folderIndex].tasks[taskIndex].priority;\n        this.setState({ allTasks: allTasksToBeUpdated });\n    }\n\n    render() {\n        // find the index of current folder's tasks in the allTasks array\n        const currentFolderIndex = this.state.allTasks.findIndex(folder => folder.folderId === this.props.currentFolderId);\n\n        // initialize JSX elements\n        var tasksElements = null;\n        var highPriorityElements = null;\n        var lowPriorityElements = null;\n        var initialTask = null;\n        var finishedTasksElements = null;\n        var showFinishedButton = false;\n        var addNewTask = null;\n        // array of tasks in current folder\n        if (currentFolderIndex !== -1) {\n            const tasks = this.state.allTasks[currentFolderIndex].tasks;\n            addNewTask = (\n                <div className={styles.AddTask} key=\"add\">\n                    <input type=\"text\" value={this.state.newTaskName}\n                        onChange={(e) => this.newTaskNameUpdate(e)}\n                        onKeyPress={(e) => this.submitIfIsEnter(e, currentFolderIndex)}\n                    ></input>\n                    <FontAwesomeIcon className={styles.Icon}\n                        onClick={() => this.onAddNewTask(currentFolderIndex)}\n                        icon={faPlus} />\n                </div>\n            )\n            if (tasks.length !== 0) {\n\n                highPriorityElements = tasks.map(task => {\n                    if(task.isFinished === false && task.priority === 1) {\n                        return (<Task key={task.taskId} task={task}\n                            currentFolderIndex={currentFolderIndex}\n                            finish={this.onFinishClick} deleteTask={this.deleteTask}\n                            editTaskName={this.editTaskName}\n                            setPriority={this.setPriority}\n                            ></Task>)\n                    } else return null;\n                });\n\n                lowPriorityElements = tasks.map(task => {\n                    if(task.isFinished === false && task.priority === 0) {\n                        return (<Task key={task.taskId} task={task}\n                            currentFolderIndex={currentFolderIndex}\n                            finish={this.onFinishClick} deleteTask={this.deleteTask}\n                            editTaskName={this.editTaskName}\n                            setPriority={this.setPriority}\n                            ></Task>)\n                    } else return null;\n                });\n                tasksElements = [highPriorityElements, lowPriorityElements];\n                // array of finished tasks in current folder\n                finishedTasksElements = tasks.map(task => {\n                    if (task.isFinished === true) {\n                        return (<Task key={task.taskId} task={task} currentFolderIndex={currentFolderIndex}\n                            finish={this.onFinishClick} deleteTask={this.deleteTask} bgColor=\"white\"></Task>)\n                    } else return null;\n                })\n                // value to toggle the finished list button\n                showFinishedButton = tasks.reduce((finishedExist, task) => {\n                    return finishedExist || task.isFinished;\n                }, false);\n            } else {\n                tasksElements = (\n                    <div style={{\n                        display: 'flex',\n                        justifyContent: 'center',\n                        alignItems: 'center'\n                    }}>Start adding your tasks!</div>\n                )\n            }\n        } else {\n            initialTask = <div>Choose a folder to start</div>\n        }\n\n\n        return (\n            <div>\n                <h1 className={styles.TasksTitle}>Tasks</h1>\n                {currentFolderIndex !== -1 ? [addNewTask, tasksElements] : initialTask}\n                <div className={styles.FinishedTasks}>\n                    {showFinishedButton ? <h3 onClick={this.toggleFinished}>Finished list</h3> : null}\n                    {currentFolderIndex !== -1 && this.state.showFinishedTasks ? finishedTasksElements : null}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Tasks;\n","import React, { Component } from 'react';\nimport Folder from './Folder/Folder';\nimport Aux from '../../hoc/Aux'\nimport Tasks from '../Tasks/Tasks'\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faPlusCircle, faPlus } from '@fortawesome/free-solid-svg-icons'\n\nimport styles from './Folders.module.css';\n\nexport class Folders extends Component {\n\n    constructor(props) {\n        super(props);\n        this.tasksElement = React.createRef();\n    }\n    state = {\n        folders: [\n            { id: 0, name: \"school\", taskQuantity: 0 },\n            { id: 1, name: \"work\", taskQuantity: 0 },\n            { id: 2, name: \"grocery\", taskQuantity: 0 },\n        ],\n        newFolderName: \"\",\n        isEditing: false,\n        currentFolderId: -1,\n        currentFolderName: \"click to choose\",\n        idOfFolderBeingEditted: -1,\n        folderIsHidden: true\n    }\n\n    showFolderInput = () => {\n        this.setState({ isEditing: true });\n    }\n\n    newFolderNameUpdate = (e) => {\n        this.setState({ newFolderName: e.target.value });\n    }\n\n    submitIfIsEnter = (e) => {\n        let code = (e.keyCode ? e.keyCode : e.which);\n        if (code === 13) {\n            this.addFolder();\n        }\n    }\n\n    addFolder = () => {\n        if (this.state.newFolderName === \"\") {\n            this.setState({ isEditing: false });\n            return;\n        }\n        const foldersToBeUpdated = [...this.state.folders];\n        let newFolderId;\n        if (foldersToBeUpdated.length === 0) {\n            newFolderId = 0;\n        } else {\n            newFolderId = foldersToBeUpdated[foldersToBeUpdated.length - 1].id + 1;\n        }\n        foldersToBeUpdated.push({\n            id: newFolderId,\n            name: this.state.newFolderName,\n            taskQuantity: 0\n        });\n        this.tasksElement.current.addFolder(newFolderId);\n        this.setState({ folders: foldersToBeUpdated, newFolderName: \"\", isEditing: false });\n    }\n\n    editFolderName = (e, id) => {\n        const foldersToBeUpdated = [...this.state.folders];\n        const index = foldersToBeUpdated.findIndex(folder => folder.id === id);\n        var newFolderName = e.target.value;\n        foldersToBeUpdated[index].name = newFolderName;\n        this.setState({ folders: foldersToBeUpdated });\n    }\n\n    confirmChange = (e, folderId) => {\n        let code = (e.keyCode ? e.keyCode : e.which);\n        if (code === 13) {\n            this.changeBeingEdittedFolderId(folderId)\n        }\n    }\n\n    changeBeingEdittedFolderId = (folderId) => {\n        if (folderId === this.state.idOfFolderBeingEditted) {\n            this.setState({ idOfFolderBeingEditted: -1 })\n        } else {\n            this.setState({ idOfFolderBeingEditted: folderId })\n        }\n    }\n\n    deleteFolder = (id) => {\n        const foldersToBeUpdated = [...this.state.folders];\n        const index = foldersToBeUpdated.findIndex(folder => folder.id === id);\n        if (window.confirm(\"Do you want to delete the folder '\" + foldersToBeUpdated[index].name + \"'?\")) {\n            foldersToBeUpdated.splice(index, 1);\n            this.tasksElement.current.deleteFolder(id);\n            this.setState({ folders: foldersToBeUpdated });\n        }\n    }\n\n    updateCurrentFolder = (id) => {\n        var currentFolderIndex = this.state.folders.findIndex(folder => folder.id === id)\n        this.setState({ \n            currentFolderId: id,\n            currentFolderName: this.state.folders[currentFolderIndex].name,\n            folderIsHidden: !this.state.folderIsHidden \n        });\n    }\n\n\n    render() {\n        // JSX elements\n        const folderElements = this.state.folders.map(eachFolder => {\n            return (\n                <Folder\n                    changeBeingEdittedFolderId={this.changeBeingEdittedFolderId}\n                    idOfFolderBeingEditted={this.state.idOfFolderBeingEditted}\n                    chosenFolderId={this.state.currentFolderId}\n                    updateCurrentFolder={this.updateCurrentFolder}\n                    key={eachFolder.id}\n                    folder={eachFolder}\n                    editFolder={this.editFolder}\n                    deleteFolder={this.deleteFolder}\n                    confirmChange={this.confirmChange}\n                    editFolderName={this.editFolderName}></Folder>\n            )\n        });\n        const plusSign = <FontAwesomeIcon\n            onClick={this.showFolderInput}\n            className={styles.AddFolderSign}\n            icon={faPlusCircle} />;\n\n        const addFolderInput =\n            <div className={styles.AddFolderInput}>\n                <input type=\"text\" id=\"newFolder\"\n                    onChange={(e) => this.newFolderNameUpdate(e)}\n                    onKeyPress={(e) => this.submitIfIsEnter(e)}></input>\n                <FontAwesomeIcon className={styles.Icon}\n                    onClick={this.addFolder}\n                    icon={faPlus} />\n            </div>\n\n        return (\n            <Aux>\n                <div className={styles.FoldersContainer}>\n                    <h1 className={styles.FolderTitle}\n                        onClick={() => { this.setState({ folderIsHidden: !this.state.folderIsHidden }) }}>\n                            Folders - {this.state.currentFolderName}</h1>\n                    <div className={this.state.folderIsHidden ? styles.HideFolder : styles.ShowFolder}>\n                        {folderElements}\n                        <div className={styles.FolderControl}>\n                            {this.state.isEditing ? addFolderInput : plusSign}\n                        </div>\n                    </div>\n\n                </div>\n                <div className={styles.TasksContainer}>\n                    <Tasks ref={this.tasksElement} currentFolderId={this.state.currentFolderId}></Tasks>\n                </div>\n            </Aux>\n        );\n    }\n}\n\nexport default Folders;\n","import React from 'react';\nimport Header from './common/Header/Header';\nimport Folders from './containers/Folders/Folders'\nimport styles from './App.module.css';\n\nfunction App() {\n  return (\n    <div className={styles.App}>\n      <style>\n        @import url('https://fonts.googleapis.com/css?family=Julius+Sans+One|Quicksand:300,400,500,600&display=swap');\n      </style>\n      <Header></Header>\n      <div className={styles.Content}>\n        <Folders></Folders>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}